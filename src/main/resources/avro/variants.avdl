@namespace("org.ga4gh.models")

/**
Defines types used by the GA4GH Variants API.
*/
protocol Variants {

import idl "common.avdl";

/**
This metadata represents VCF header information.
*/
record VariantSetMetadata {
  /** The top-level key. */
  string key;

  /** The value field for simple metadata. */
  string value;

  /**
  User-provided ID field, not enforced by this API.
  Two or more pieces of structured metadata with identical
  id and key fields are considered equivalent.
  */
  string id;

  /** The type of data. */
  string type;

  /**
  The number of values that can be included in a field described by this
  metadata.
  */
  string number;

  /** A textual description of this metadata. */
  string description;

  /** Remaining structured metadata key-value pairs. */
  map<array<string>> info = {};
}

/**
`Variant` and `CallSet` both belong to a `VariantSet`.
`VariantSet` belongs to a `Dataset`.
The variant set is equivalent to a VCF file.
*/
record VariantSet {
  /** The variant set ID. */
  string id;

  /** The ID of the dataset this variant set belongs to. */
  string datasetId;

  /**
  The reference set the variants in this variant set are using.
  */
  string referenceSetId;

  /**
  The metadata associated with this variant set. This is equivalent to
  the VCF header information not already presented in first class fields.
  */
  array<VariantSetMetadata> metadata = [];
}

/**
A `CallSet` is a collection of variant calls for a particular sample.
It belongs to a `VariantSet`. This is equivalent to one column in VCF.
*/
record CallSet {

  /** The call set ID. */
  string id;

  /** The call set name. */
  union { null, string } name = null;

  /** The sample this call set's data was generated from. */
  union { null, string } sampleId;

  /** The IDs of the variant sets this call set has calls in. */
  array<string> variantSetIds = [];

  /** The date this call set was created in milliseconds from the epoch. */
  union { null, long } created = null;

  /**
  The time at which this call set was last updated in
  milliseconds from the epoch.
  */
  union { null, long } updated = null;

  /**
  A map of additional call set information.
  */
  map<array<string>> info = {};
}

/**
`Allele`s are the key component of the "unary" model of variation: they are
single objects that are present in some copy number.

An `Allele` is a contiguous piece of sequence that we will want to say is
present (in general at some copy number) or absent in a sample. Very often it
will just be a single `Segment` covering the entirety of a `Sequence`, but it
may be in general be any contiguous path through the sequence graph.

`Allele`s belong to `VariantSet`s.

Note that `Path`s cannot follow `Join`s not represented in the `ReferenceSet`.
For example, if  an `Allele` that spans a newly discovered deletion is required,
a new `Join` should exist in a new `ReferenceSet` created for this `VariantSet`
(which might in turn include a more standard parent `ReferenceSet`).
*/
record Allele {
  /**
  The ID of this `Allele`. If this `Allele` is one `Segment` consisting of
  the entirety of a `Sequence`, this is equal to the ID of that `Sequence`.
  */
  string id;

  /** The ID of the variant set this allele belongs to. */
  string variantSetId;

  /**
  The ordered and oriented `Segment`s of DNA that this `Allele` represents.

  `Segment`s on this `Path` are on either `Reference` `Sequence`s, or
  `Sequence`s associated with this `VariantSet. Both types of `Sequence`s are
  available through the `searchSequences()` and `getSequence()` API calls.
  */
  Path path;
  
  /**
  The base-by-base sequence may be specified in-line. Otherwise, it must be
  reconstructed by the client by parsing the `Path` and calling
  `getSequenceBases()` repeatedly.
  */
  union { null, string } sequenceBases = null;
  
  /**
  MD5 of the `Path` for the `Region`. TODO: define how this is calculated.
  */
  string md5checksum;
}

/**
Represents a call for a pair of orthogonal `Allele`s on a single haplotype.
Either allele, some other allele, or an unknown allele may be present.
*/
enum BinaryCall {
    ALLELE1,
    ALLELE2,
    OTHER_ALLELE,
    MISSING
}

/**
Represents a call for a single `Allele` on a single haplotype. That allele, some
other allele, or an unknown allele may be present.
*/
enum UnaryCall {
    THIS_ALLELE,
    OTHER_ALLELE,
    MISSING
}

/**
Represents a set of calls for a single `Allele` on some pre-determined list of
`CallSet`s.
*/
record UnaryAlleleCalls {
  Allele allele;
  // Look up with dense_calls[sample][haplotype]
  array<array<UnaryCall>> denseCalls = [];
  array<array<int>> quality = []; // quality for each haplotype call; likely to be boolean in implementation
}

/**
Represents a set of calls for a pair of orthogonal `Allele`d on some pre-
determined list of `CallSet`s.
*/
record OrthogonalAlleleCalls {
  Allele allele1, allele2;
  // Look up with dense_calls[sample][haplotype]
  array<array<BinaryCall>> denseCalls = [];
  array<array<int>> quality = []; // quality for each haplotype call; likely to be boolean in implementation
}

}
