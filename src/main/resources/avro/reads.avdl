@namespace("org.ga4gh")
protocol GAReads {

record GAReferenceSequence {
  union { null, string } assemblyId = null;
  union { null, long } length = null;
  union { null, string } md5checksum = null;
  union { null, string } name = null;
  union { null, int } ncbi_taxon_id = null;  // ID from http://www.ncbi.nlm.nih.gov/taxonomy (e.g. 9606->human)
  union { null, string } uri = null;

  // The accession number of the official sequence from which this reference
  // sequence is derived. A sequence X is said to be *derived* from sequence Y,
  // if X and Y are of the same length and the per-base sequence divergence at
  // A/C/G/T bases is sufficiently small. Two sequences derived from the same
  // official sequence share the same coordinates and annotations, and can be
  // replaced with the official sequence for certain use cases.
  union { null, string } sourceAccession = null;
}

record GAProgram {
  union { null, string } commandLine = null;
  union { null, string } id = null;
  union { null, string } name = null;
  union { null, string } prevProgramId = null;
  union { null, string } version = null;
}

record GAKeyValue { 
    string key;
    string value = null;
}

record GADataSet {
    string id;
    union { null, string } description = null;
}

record GAReadGroup {

  // The readgroup ID.
  string id;

  // The ID of the dataset this readgroup belongs to.
  union {null, string} datasetId = null;

  // The readgroup name.
  union {null, string} name = null;

  // The readgroup description.
  union {null, string} description = null;
  
  // The sample this readgroup's data was generated from.
  union { null, string } sample;
  
  union { null, string } library = null;
  union { null, string } platformUnit = null;
  union { null, int } predictedInsertSize = null;
  union { null, string } sequencingCenter;
  union { null, string } sequencingTechnology;

  // The date this readgroup was created.
  union {null, long} created = null;

  // The number of reads in this readgroup.
  union {null, long} readCount = null;
  
  // The programs used to generate this readgroup.
  array<GAProgram> programs = [];

  // The reference sequences the reads in this readgroup are aligned to.
  array<GAReferenceSequence> referenceSequences = [];
  
  // Additional information
  array<GAKeyValue> tags = [];
}

enum GACigarOperation {
    ALIGNMENT_MATCH,   // M
    INSERT,            // I
    DELETE,            // D
    SKIP,              // N
    CLIP_SOFT,         // S
    CLIP_HARD,         // H
    PAD,               // P
    SEQUENCE_MATCH,    // =
    SEQUENCE_MISMATCH  // X
}

record GACigarUnit {
    GACigarOperation operation;
    long operationLength;

    // contigSequence is only used at mismatches (X) and deletions (D). Filling
    // this field replaces the MD tag. If the relevant information is not
    // available, leave this field as "null".
    union { null, string } contigSequence = null;
}

record GALinearAlignment { // a linear alignment can be represented by one CIGAR string
    string contigName;
    long position;
    boolean reverseStrand; // the alignment is on the reverse strand of the contig
    union { null, boolean } secondaryAlignment = null; // SAM flag 0x100
    union { null, int } mappingQuality = null;
    array<GACigarUnit> cigar = []; 

    // the portion of the read sequence and quality being described by cigar[]
    union { null, string } alignedSequence = null;
    union { null, string } alignedQuality = null;
}

// Each alignment record describes a linear alignment with additional
// information about the fragment and the read. An alignment record is
// equivalent to a line in a SAM file.
record GAAlignmentRecord {
  
    // fragment attributes
    string fragmentName;
    union { null, boolean } properPlacement = false; // extension of SAM flag 0x2
    union { null, boolean } duplicateFragment = false; // SAM flag 0x400
	int numberReads; // number of reads in the fragment
    union { null, int } templateLength = null;

    // read attributes
    union { null, int } readNumber;
    union { null, boolean } failedVendorQualityChecks = false; // SAM flag 0x200

    // this linear alignment
    union { null, GALinearAlignment } alignment = null; // null if unmapped

    // Each read has one and only one primary record. The full read sequence
	// and quality are present in the primary record by convention. In SAM, the
	// flag of a primary record satisfies (flag&0x900)==0.
	union { null, boolean } primaryRecord = true;

    // otherAlignments[i][j] gives the j-th alignment of the i-th read in the
    // fragment. otherAlignments[readNumber] gives other linear alignments of
    // this current read.
    array<array<GALinearAlignment>> otherAlignments = [];

    array<GAKeyValue> tags = [];
}

}
