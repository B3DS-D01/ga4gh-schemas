@namespace("org.ga4gh")
protocol GAReads {

import idl "common.avdl";

record GAReferenceSequence {
  string name ; // must be unique within any ReferenceSequenceSet that contains this
  long length ;

  // The literal sequence, or the uri from which the sequence can be obtained, or 
  // the accession number of the sequence or the sequence from which this sequence is derived.
  union { null, string } sequence = null;
  union { null, string } uri = null; // ** we need to specify the protocol to retrieve the sequence from this uri
  union { null, string } sourceAccession = null; // in INSDC (GenBank/ENA/DDBJ), ideally with version number
  
  // A sequence X is said to be *derived* from sequence Y, if X and Y are of the same length 
  // and the per-base sequence divergence at A/C/G/T bases is sufficiently small. Two sequences 
  // derived from the same official sequence share the same coordinates and annotations, and 
  // can be replaced with the official sequence for certain use cases.
  union { null, float } sourceDivergence = null; // fraction of bases that are different when aligned without indels

  // We require either sequence, or either a uri or sourceAccession here, or a uri or sourceAccession in
  // the ReferenceSequenceSet containing this reference sequence.  If sourceDivergence is not null then 
  // sequence or uri should be given (or we could allow a cigar string to create it from the sourceAccession?).
}

record GAReferenceSequenceSet {
  string id;
  array<GAReferenceSequence> referenceSequences = [];
  union { null, string } assemblyId = null;
  union { null, string } md5checksum = null; // ** we need to specify how this is derived from the contents
  union { null, int } ncbi_taxon_id = null;  // ID from http://www.ncbi.nlm.nih.gov/taxonomy (e.g. 9606->human)
  union { null, string } uri = null; // ** we need to specify the protocol to retrieve sequences from this uri

  // The accession number of this sequence, or the sequence from which this sequence is derived, if no uri is given
  // Accession numbers can be given here, or in ReferenceSequence for individual sequences.
  union { null, string } sourceAccession = null; // in INSDC (GenBank/ENA/DDBJ), ideally with version number
  
  // We require either uri, or sourceAccession, or literal sequences to be given for each contained sequence.
  
  // A ReferenceSequenceSet may be derived from an accession if it contains additional sequences, or some
  // of the sequences within it are derived (see the definition of *derived* in GAReferenceSequence).
  // Semantics are that if isDerived is true then any contained sequence with literal sequence or a uri
  // will replace the sequence from the accession with the same name, if there is one, else add to the set.
  boolean isDerived = false; // set to true if sourceAccession is given and there is any difference from sourceAccession 
}

record GAProgram {
  union { null, string } commandLine = null;
  union { null, string } id = null;
  union { null, string } name = null;
  union { null, string } prevProgramId = null;
  union { null, string } version = null;
}

record GADataSet {
    string id;
    union { null, string } description = null;
}

record GAReadGroup {

  // The readgroup ID.
  string id;

  // The ID of the dataset this readgroup belongs to.
  union {null, string} datasetId = null;

  // The readgroup name.
  union {null, string} name = null;

  // The readgroup description.
  union {null, string} description = null;

  // The sample this readgroup's data was generated from.
  union { null, string } sample;

  union { null, string } library = null;
  union { null, string } platformUnit = null;
  union { null, int } predictedInsertSize = null;
  union { null, string } sequencingCenter;
  union { null, string } sequencingTechnology;

  // The date this readgroup was created.
  union {null, long} created = null;

  // The number of reads in this readgroup.
  union {null, long} readCount = null;

  // The programs used to generate this readgroup.
  array<GAProgram> programs = [];

  // The reference sequence set the reads in this readgroup are aligned to.
  string referenceSequenceSetId;

  // Additional information
  array<GAKeyValue> tags = [];
}

record GAReadgroupSet {
  // The readgroup set ID.
  string id;

  // The ID of the dataset this readgroup set belongs to.
  union {null, string} datasetId = null;

  // The readgroup set name.
  union {null, string} name = null;

  // The readgroups in this set.
  array<GAReadGroup> readGroups = [];
  
  // NB: we require that all readgroups in the set are mapped to the same referenceSequenceSet.
}

enum GACigarOperation {
    ALIGNMENT_MATCH,   // M
    INSERT,            // I
    DELETE,            // D
    SKIP,              // N
    CLIP_SOFT,         // S
    CLIP_HARD,         // H
    PAD,               // P
    SEQUENCE_MATCH,    // =
    SEQUENCE_MISMATCH  // X
}

record GACigarUnit {
    GACigarOperation operation;
    long operationLength;

    // contigSequence is only used at mismatches (X) and deletions (D). Filling
    // this field replaces the MD tag. If the relevant information is not
    // available, leave this field as "null".
    union { null, string } referenceSequence = null;
}

record GALinearAlignment { // a linear alignment can be represented by one CIGAR string
    string referenceSequenceName;
    long position;
    union { null, int } mappingQuality = null;
    array<GACigarUnit> cigar = [];
}

record GARead {
    // The read ID
    union { null, string } id = null;

    // The name of the read. When imported from a BAM file, this is the query
    // template name. (QNAME)
    union { null, string } name = null;

    // The ID of the readgroup this read belongs to. (Every read must belong to exactly one readgroup.)
    string readgroupId;

    // Read flags (all default to false)
    union { boolean, null } readPaired = false;   // The paired read must belong to the same readgroup.
    union { boolean, null } properPair = false;
    union { boolean, null } readMapped = false;
    union { boolean, null } mateMapped = false;
    union { boolean, null } readNegativeStrand = false;
    union { boolean, null } mateNegativeStrand = false;
    union { boolean, null } firstOfPair = false;
    union { boolean, null } secondOfPair = false;
    union { boolean, null } primaryAlignment = false;
    union { boolean, null } failedVendorQualityChecks = false;
    union { boolean, null } duplicateRead = false;

    // The alignment of this read. If unmapped, the array is empty. If the
    // alignment is linear (vast majority of alignments), the array is of size
    // one. If the alignment is composed of multiple simple linear alignments
    // (i.e. chimeric), the components can be found in the SA tag for mappers
    // supporting the feature.
    array<GALinearAlignment> alignment = [];

    // The mate alignment.
    array<GALinearAlignment> mateAlignment = [];

    // Length of the original piece of dna that produced both this read and the
    // paired read. (TLEN)
    union { null, int } templateLength = null;

    // The list of bases that this read represents (e.g. 'CATCGA'). (SEQ)
    union { null, string } originalBases = null;

    /**
    An array of the [Phred quality score](http://en.wikipedia.org/wiki/Phred_quality_score)
    for each base of `originalBases`
    */
    array<int> baseQuality = [];

    array<GAKeyValue> tags = [];
}

}
