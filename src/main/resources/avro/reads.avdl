@namespace("org.ga4gh")
protocol GAReads {

/*
 * This file defines the objects used to represent a hierarchy of reads and alignments:
 *    GAReadgroupSet >--< GAReadgroup --< fragment --< read --< alignment --< linear alignment
 *
 * A GAReadgroupSet is a logical collection of GAReadgroup's.
 * A GAReadgroup is all the data that’s processed the same way by the sequencer.
 *    There are typically 1-10 GAReadgroup's in a GAReadgroupSet.
 * A *fragment* is a single stretch of a DNA molecule.
 *    There are typically millions of fragments in a GAReadgroup.
 *    A fragment has a name (QNAME in BAM spec), a length (TLEN in BAM spec), and an array of reads.
 * A *read* is a contiguous sequence of bases.
 *    There are typically only one or two reads in a fragment. If there are two reads, they’re known as a mate pair.
 *    A read has an array of base values, an array of base qualities, and alignment information.
 * An *alignment* is the way alignment software maps a read to a reference.
 *    There’s one primary alignment, and can be one or more secondary alignments.
 *    Secondary alignments represent alternate possible mappings -- they are rarely reported by aligners.
 * A *linear alignment* maps a string of bases to a reference using a single CIGAR string.
 *    There’s one representative alignment, and can be one or more supplementary alignments.
 *    Supplementary alignments represent chimeric reads -- they are rare.
 *
 * A GAReadAlignment object is a flattened representation of the bottom layers of this hierarchy.
 *    There's exactly one such object per *linear alignment*.
 *    The object contains alignment info, plus fragment and read info for easy access.
 */

import idl "common.avdl";

record GAReferenceSequence {
  union { null, string } assemblyId = null;
  union { null, long } length = null;
  union { null, string } md5checksum = null;
  union { null, string } name = null;
  union { null, int } ncbi_taxon_id = null;  // ID from http://www.ncbi.nlm.nih.gov/taxonomy (e.g. 9606->human)
  union { null, string } uri = null;

  // The accession number of the official sequence from which this reference
  // sequence is derived. A sequence X is said to be *derived* from sequence Y,
  // if X and Y are of the same length and the per-base sequence divergence at
  // A/C/G/T bases is sufficiently small. Two sequences derived from the same
  // official sequence share the same coordinates and annotations, and can be
  // replaced with the official sequence for certain use cases.
  union { null, string } sourceAccession = null;
}

record GAProgram {
  union { null, string } commandLine = null;
  union { null, string } id = null;
  union { null, string } name = null;
  union { null, string } prevProgramId = null;
  union { null, string } version = null;
}

record GADataSet {
    string id;
    union { null, string } description = null;
}

record GAReadGroup {

  // The readgroup ID.
  string id;

  // The ID of the dataset this readgroup belongs to.
  union {null, string} datasetId = null;

  // The readgroup name.
  union {null, string} name = null;

  // The readgroup description.
  union {null, string} description = null;

  // The sample this readgroup's data was generated from.
  union { null, string } sample;

  union { null, string } library = null;
  union { null, string } platformUnit = null;
  union { null, int } predictedInsertSize = null;
  union { null, string } sequencingCenter;
  union { null, string } sequencingTechnology;

  // The date this readgroup was created.
  union {null, long} created = null;

  // The number of reads in this readgroup.
  union {null, long} readCount = null;

  // The programs used to generate this readgroup.
  array<GAProgram> programs = [];

  // The reference sequences the reads in this readgroup are aligned to.
  array<GAReferenceSequence> referenceSequences = [];

  // Additional information
  array<GAKeyValue> tags = [];
}

record GAReadgroupSet {
  // The readgroup set ID.
  string id;

  // The ID of the dataset this readgroup set belongs to.
  union {null, string} datasetId = null;

  // The readgroup set name.
  union {null, string} name = null;

  // The readgroups in this set.
  array<GAReadGroup> readGroups = [];
}

enum GACigarOperation {
    ALIGNMENT_MATCH,   // M
    INSERT,            // I
    DELETE,            // D
    SKIP,              // N
    CLIP_SOFT,         // S
    CLIP_HARD,         // H
    PAD,               // P
    SEQUENCE_MATCH,    // =
    SEQUENCE_MISMATCH  // X
}

record GACigarUnit {
    GACigarOperation operation;
    long operationLength;

    // contigSequence is only used at mismatches (X) and deletions (D). Filling
    // this field replaces the MD tag. If the relevant information is not
    // available, leave this field as "null".
    union { null, string } contigSequence = null;
}

record GALinearAlignment { // a linear alignment can be represented by one CIGAR string
    string contigName;
    long position;
    union { null, int } mappingQuality = null;
    array<GACigarUnit> cigar = [];
}

record GARead {
    // The read ID
    union { null, string } id = null;

    // The name of the read. When imported from a BAM file, this is the query
    // template name. (QNAME)
    union { null, string } name = null;

    // The ID of the readgroup this read belongs to. (Every read must belong to exactly one readgroup.)
    string readgroupId;

    // Read flags (all default to false)
    union { boolean, null } readPaired = false;   // The paired read must belong to the same readgroup.
    union { boolean, null } properPair = false;
    union { boolean, null } readMapped = false;
    union { boolean, null } mateMapped = false;
    union { boolean, null } readNegativeStrand = false;
    union { boolean, null } mateNegativeStrand = false;
    union { boolean, null } firstOfPair = false;
    union { boolean, null } secondOfPair = false;
    union { boolean, null } primaryAlignment = false;
    union { boolean, null } failedVendorQualityChecks = false;
    union { boolean, null } duplicateRead = false;

    // The alignment of this read. If unmapped, the array is empty. If the
    // alignment is linear (vast majority of alignments), the array is of size
    // one. If the alignment is composed of multiple simple linear alignments
    // (i.e. chimeric), the components can be found in the SA tag for mappers
    // supporting the feature.
    array<GALinearAlignment> alignment = [];

    // The mate alignment.
    array<GALinearAlignment> mateAlignment = [];

    // Length of the original piece of dna that produced both this read and the
    // paired read. (TLEN)
    union { null, int } templateLength = null;

    // The list of bases that this read represents (e.g. 'CATCGA'). (SEQ)
    union { null, string } originalBases = null;

    /**
    An array of the [Phred quality score](http://en.wikipedia.org/wiki/Phred_quality_score)
    for each base of `originalBases`
    */
    array<int> baseQuality = [];

    array<GAKeyValue> tags = [];
}

}
