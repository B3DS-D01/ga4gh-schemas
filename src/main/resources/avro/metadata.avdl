@namespace("org.ga4gh.models")

/**
This protocol defines metadata objects and attributes for use in the other
GA4GH protocols. This includes metadata for individuals, samples, analyses
and instrumentation as well as ontology representations for metadata.
*/

protocol Metadata {

  import idl "common.avdl";

  /**
  An ontology term describing an attribute. (e.g. the phenotype attribute
  'polydactyly' from HPO)
  */
  record OntologyTerm {
    /**
    Ontology source identifier - the identifier, a CURIE (preferred) or
    PURL for an ontology source e.g. http://purl.obolibrary.org/obo/hp.obo
    It differs from the standard GA4GH schema's :ref:`id <apidesign_object_ids>`
    in that it is a URI pointing to an information resource outside of the scope
    of the schema or its resource implementation.
    */
    string id;

    /**
    Ontology term - the representation the id is pointing to.
    */
    union { null, string } term = null;

    /**
    Ontology source name - the name of ontology from which the term is obtained
    e.g. 'Human Phenotype Ontology'
    */
    union { null, string } sourceName = null;

    /**
    Ontology source version - the version of the ontology from which the
    OntologyTerm is obtained; e.g. 2.6.1.
    There is no standard for ontology versioning and some frequently
    released ontologies may use a datestamp, or build number.
    */
    union { null, string } sourceVersion = null;
  }

  /**
  A geographic location object.
  This implementation supports a single "point" location
  and an additional/fallback description (e.g. address style) attribute.

  Using multiple GeographicLocation objects in an ordered list could allow for
  encoding of polygon-style locations (e.g. representation of administrative
  boundaries).

  The geographic point object uses the default units from the DCMI point scheme
  http://dublincore.org/documents/dcmi-point/
  and avoids optional representation in non-standard units.

  TODO:
  - Include extended attributes, capture standardized address parameters?
  */
  record GeographicLocation {

    /**
    signed decimal degrees (North, relative to Equator)
    */
    union { null, float } latitude = null;

    /**
    signed decimal degrees (East, relative to IERS Reference Meridian)
    */
    union { null, float } longitude = null;

    /**
    meters above/below (standard) sea level
    */
    union { null, float } elevation = null;

    /**
    A verbose description of the location, for processing into latitude,
    longitude, elevation attributes.
    Preferably used standard "administrative boundaries" terms.
    */
    union { null, string } description = null;

  }

  /**
  Represents a group of individuals. (e.g. a trio)
  TODO: review, this clearly define how this works.  Need an list of
  individuals.  Needs typed.
  TODO: how does matchmaker group them?
  https://github.com/MatchmakerExchange/mme-apis/blob/master/search-api.md
  */
  record IndividualGroup {

    /**
    Formats of id | name | description | accessions are described in the
    documentation on general attributes and formats.
    */
    string id;

    union { null, string } name = null;

    union { null, string } description = null;

    array<string> accessions;

    /**
    The :ref:`ISO 8601<metadata_date_time>` time at which this IndividualGroup's record was created.
    */
    string created;

    /**
    The :ref:`ISO 8601<metadata_date_time>` time at which this IndividualGroup's record was updated.
    */
    string updated;

    /**
    Group member ids.
    */
    array<string> memberIds;

    /**
    The type of individual group.
    */
    union { null, string } type = null;

    /**
    A map of additional information.
    */
    map<array<string>> info = {};
  }

  /**
  A Dataset is a collection of related data of multiple types.
  Data providers decide how to group data into datasets.
  See [Metadata API](../api/metadata.html) for a more detailed discussion.
  */
  record Dataset {
    /**
    The dataset's id, locally unique to the server instance.
    */
    string id;

    /**
    The name of the dataset.
    */
    union { null, string } name = null;

    /**
    Additional, human-readable information on the dataset.
    */
    union { null, string } description = null;

  }
}
